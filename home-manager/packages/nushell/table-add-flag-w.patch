diff --git a/crates/nu-command/src/viewers/table.rs b/crates/nu-command/src/viewers/table.rs
index f146d0e3..27b34de6 100644
--- a/crates/nu-command/src/viewers/table.rs
+++ b/crates/nu-command/src/viewers/table.rs
@@ -18,6 +18,16 @@ use terminal_size::{Height, Width};
 const STREAM_PAGE_SIZE: usize = 1000;
 const STREAM_TIMEOUT_CHECK_INTERVAL: usize = 100;
 
+fn get_term_width(width_param: Option<i64>) -> usize {
+    if let Some(col) = width_param {
+        col as usize
+    } else if let Some((Width(w), Height(_h))) = terminal_size::terminal_size() {
+        (w - 1) as usize
+    } else {
+        80usize
+    }
+}
+
 #[derive(Clone)]
 pub struct Table;
 
@@ -44,6 +54,12 @@ impl Command for Table {
                 Some('n'),
             )
             .switch("list", "list available table modes/themes", Some('l'))
+            .named(
+                "width",
+                SyntaxShape::Int,
+                "number of terminal columns wide (not output columns)",
+                Some('w'),
+            )
             .category(Category::Viewers)
     }
 
@@ -62,11 +78,8 @@ impl Command for Table {
         let row_offset = start_num.unwrap_or_default() as usize;
         let list: bool = call.has_flag("list");
 
-        let term_width = if let Some((Width(w), Height(_h))) = terminal_size::terminal_size() {
-            (w - 1) as usize
-        } else {
-            80usize
-        };
+        let width_param: Option<i64> = call.get_flag(engine_state, stack, "width")?;
+        let term_width = get_term_width(width_param);
 
         if list {
             let table_modes = vec![
@@ -123,6 +136,7 @@ impl Command for Table {
                 row_offset,
                 ctrlc,
                 metadata,
+                width_param,
             ),
             PipelineData::ListStream(stream, metadata) => handle_row_stream(
                 engine_state,
@@ -132,6 +146,7 @@ impl Command for Table {
                 row_offset,
                 ctrlc,
                 metadata,
+                width_param,
             ),
             PipelineData::Value(Value::Record { cols, vals, .. }, ..) => {
                 let mut output = vec![];
@@ -183,6 +198,7 @@ impl Command for Table {
                 row_offset,
                 ctrlc,
                 metadata,
+                width_param,
             ),
             x => Ok(x),
         }
@@ -228,6 +244,7 @@ fn handle_row_stream(
     row_offset: usize,
     ctrlc: Option<Arc<AtomicBool>>,
     metadata: Option<PipelineMetadata>,
+    width_param: Option<i64>,
 ) -> Result<nu_protocol::PipelineData, nu_protocol::ShellError> {
     let stream = match metadata {
         Some(PipelineMetadata {
@@ -315,6 +332,7 @@ fn handle_row_stream(
                 ctrlc: ctrlc.clone(),
                 head,
                 stream,
+                width_param,
             }),
             ctrlc,
             head,
@@ -469,6 +487,7 @@ struct PagingTableCreator {
     ctrlc: Option<Arc<AtomicBool>>,
     config: Config,
     row_offset: usize,
+    width_param: Option<i64>,
 }
 
 impl Iterator for PagingTableCreator {
@@ -507,12 +526,7 @@ impl Iterator for PagingTableCreator {
         }
 
         let color_hm = get_color_config(&self.config);
-
-        let term_width = if let Some((Width(w), Height(_h))) = terminal_size::terminal_size() {
-            (w - 1) as usize
-        } else {
-            80usize
-        };
+        let term_width = get_term_width(self.width_param.clone());
 
         let table = convert_to_table(
             self.row_offset,
